#!/bin/bash

# Crear directorio de resultados si no existe
mkdir -p results

# Verificar si Trivy est√° instalado
echo "üîç Verificando instalaci√≥n de Trivy..."
if ! command -v trivy &> /dev/null; then
  echo "‚ùå Error: Trivy no est√° instalado. Ejecuta setup-dependencies.sh primero."
  exit 1
fi

# Verificar que Docker est√° en ejecuci√≥n
if ! systemctl is-active --quiet docker; then
  echo "‚ùå Error: Docker no est√° en ejecuci√≥n. In√≠cialo con 'sudo systemctl start docker'"
  exit 1
fi

# Encontrar la ra√≠z del repositorio
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo "$PWD")
cd "$REPO_ROOT" || { echo "‚ùå Error: No se pudo acceder a la ra√≠z del repositorio."; exit 1; }

# Verificar si existe un Dockerfile en la ra√≠z del repositorio
if [ ! -f "$REPO_ROOT/Dockerfile" ]; then
  echo "‚ùå Error: No se encontr√≥ un Dockerfile en la ra√≠z del repositorio."
  exit 1
fi

# Construir la imagen Docker antes de escanear
IMAGE_NAME="custom-app:latest"
echo "üê≥ Construyendo la imagen Docker: $IMAGE_NAME en $REPO_ROOT"
docker build -t "$IMAGE_NAME" "$REPO_ROOT"
if [ $? -ne 0 ]; then
  echo "‚ùå Error: Fall√≥ la construcci√≥n de la imagen Docker."
  exit 1
fi

# Asegurar que no existe un archivo conflictivo
rm -rf results/trivy-results.json

# Ejecutar Trivy directamente en la imagen reci√©n construida
echo "üîç Escaneando la imagen con Trivy..."
trivy image --format json -o results/trivy-results.json "$IMAGE_NAME"

# Verificar si el archivo se gener√≥ correctamente
if [ ! -f results/trivy-results.json ]; then
  echo "{}" > results/trivy-results.json
  echo "‚ö†Ô∏è Trivy no gener√≥ un archivo v√°lido, se cre√≥ un JSON vac√≠o."
fi

# Mensaje de confirmaci√≥n
echo "‚úÖ Trivy scan completado. Reporte generado en results/trivy-results.json"
