name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare Results Directory
        run: |
          mkdir -p results
          chmod -R 777 results

      - name: Run Checkov (IaC Scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          output_format: json
          output_file_path: results/checkov-results.json
        continue-on-error: true

      - name: Verify Checkov Execution
        run: |
          if [ -s results/checkov-results.json ]; then
            echo "✅ Checkov generó el archivo correctamente."
            cat results/checkov-results.json | jq '.'
          else
            echo "❌ Error: Checkov no generó un archivo de salida válido."
            ls -l results/
            find . -name "checkov-results.json"
            exit 1
          fi

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y golang jq

      - name: Install Nuclei
        run: |
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          sudo cp ~/go/bin/nuclei /usr/local/bin/nuclei

      - name: Run Nuclei (DAST Scan)
        run: |
          nuclei -u https://example.com -o results/nuclei-results.txt || true

      - name: Run Gitleaks (Secret Scan)
        uses: gitleaks/gitleaks-action@v2.3.7
        with:
          config: .gitleaks.toml
          report-format: json
          report-path: results/gitleaks-report.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Verify Gitleaks Execution
        run: |
          if [ -s results/gitleaks-report.json ]; then
            echo "✅ Gitleaks generó el archivo correctamente."
            cat results/gitleaks-report.json | jq '.'
          else
            echo "⚠️ Advertencia: Gitleaks no generó un archivo de salida válido, pero no detendremos la ejecución."
            touch results/gitleaks-report.json
          fi

      - name: Build Vulnerable Docker Image
        run: |
          docker build -t vulnerable-image:latest .
        continue-on-error: true

      - name: Run Trivy (Container Scan)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vulnerable-image:latest'
          format: 'json'
          output: 'results/trivy-results.json'
        continue-on-error: true

      - name: Run Dependency Check (SCA)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          format: 'XML'
          out: 'results/dependency-check-report.xml'
        continue-on-error: true

      - name: Run Bearer (SAST Scan)
        uses: bearer/bearer-action@v2
        with:
          output: results/bearer-results.json
        continue-on-error: true

      - name: Obtener Product ID manualmente
        run: |
          PRODUCT_ID=<REEMPLAZA_CON_EL_ID_DEL_PRODUCTO>
          echo "PRODUCT_ID=$PRODUCT_ID" >> $GITHUB_ENV
          sleep 2

      - name: Crear Engagement si no existe
        run: |
          RESPONSE=$(curl -s -X POST "http://3.135.211.4:8080/api/v2/engagements/" \
            -H "Authorization: Token 1c6dca9f2b8f4c73c23564e9ccdb20f356f2f580" \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"Engagement Automático\", \"product\": $PRODUCT_ID, \"lead\": 1, \"status\": \"In Progress\", \"target_start\": \"2025-02-23\", \"target_end\": \"2025-03-01\", \"engagement_type\": \"CI/CD\"}")
          ENGAGEMENT_ID=$(echo $RESPONSE | jq -r '.id')
          if [ -z "$ENGAGEMENT_ID" ] || [ "$ENGAGEMENT_ID" == "null" ]; then
            echo "❌ Error: No se pudo obtener el Engagement ID."
            exit 1
          fi
          echo "ENGAGEMENT_ID=$ENGAGEMENT_ID" >> $GITHUB_ENV
          sleep 5

      - name: Confirmar éxito de importación
        run: |
          echo "✅ Verificación finalizada, revisa DefectDojo para confirmar la carga."
