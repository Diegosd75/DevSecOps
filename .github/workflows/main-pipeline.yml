name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Prepare Results Directory
        run: mkdir -p results

      - name: Run Checkov (IaC Scan)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          output_format: json
          output_file_path: results/checkov-results.json
        continue-on-error: true

      - name: Verify Checkov Execution
        run: |
          if [ ! -s results/checkov-results.json ]; then
            echo "❌ Error: El archivo checkov-results.json no existe o está vacío."
            exit 1
          else
            echo "✅ Archivo encontrado, procediendo con la carga."
          fi

      - name: Verificar conexión con DefectDojo
        run: |
          curl -X GET "http://3.135.211.4:8080/api/v2/products/" \
            -H "Authorization: Token 1c6dca9f2b8f4c73c23564e9ccdb20f356f2f580" \
            -H "Accept: application/json"

      - name: Obtener Product ID
        run: |
          PRODUCT_ID=$(curl -s -X GET "http://3.135.211.4:8080/api/v2/products/" \
            -H "Authorization: Token 1c6dca9f2b8f4c73c23564e9ccdb20f356f2f580" \
            -H "Accept: application/json" | jq -r '.results[0].id')
          if [ -z "$PRODUCT_ID" ] || [ "$PRODUCT_ID" == "null" ]; then
            echo "⚠️ No se encontró un producto, creando uno nuevo."
            RESPONSE=$(curl -s -X POST "http://3.135.211.4:8080/api/v2/products/" \
              -H "Authorization: Token 1c6dca9f2b8f4c73c23564e9ccdb20f356f2f580" \
              -H "Content-Type: application/json" \
              -d '{"name": "Producto Automático", "description": "Producto creado desde pipeline", "prod_type": 1}')
            PRODUCT_ID=$(echo $RESPONSE | jq -r '.id')
          fi
          if [ -z "$PRODUCT_ID" ] || [ "$PRODUCT_ID" == "null" ]; then
            echo "❌ Error: No se pudo obtener o crear un Product ID válido."
            exit 1
          fi
          echo "PRODUCT_ID=$PRODUCT_ID" >> $GITHUB_ENV
          sleep 5

      - name: Crear Engagement si no existe
        run: |
          RESPONSE=$(curl -s -X POST "http://3.135.211.4:8080/api/v2/engagements/" \
            -H "Authorization: Token 1c6dca9f2b8f4c73c23564e9ccdb20f356f2f580" \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"Engagement Automático\", \"product\": $PRODUCT_ID, \"lead\": 1, \"status\": \"In Progress\", \"target_start\": \"2025-02-23\", \"target_end\": \"2025-03-01\", \"engagement_type\": \"CI/CD\"}")
          ENGAGEMENT_ID=$(echo $RESPONSE | jq -r '.id')
          if [ -z "$ENGAGEMENT_ID" ] || [ "$ENGAGEMENT_ID" == "null" ]; then
            echo "❌ Error: No se pudo obtener el Engagement ID."
            exit 1
          fi
          echo "ENGAGEMENT_ID=$ENGAGEMENT_ID" >> $GITHUB_ENV
          sleep 5

      - name: Upload Checkov Report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: 1c6dca9f2b8f4c73c23564e9ccdb20f356f2f580
          defectdojo_url: http://3.135.211.4:8080/api/v2/import-scan/
          file: results/checkov-results.json
          scan_type: Checkov Scan
          engagement: ${{ env.ENGAGEMENT_ID }}

      - name: Confirmar éxito de importación
        run: |
          echo "✅ Verificación finalizada, revisa DefectDojo para confirmar la carga."
